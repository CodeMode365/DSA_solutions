/*
2104. Sum of Subarray Ranges
Medium
1.9K
92
Companies
You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.

Return the sum of all subarray ranges of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
Example 2:

Input: nums = [1,3,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0
[3], range = 3 - 3 = 0
[3], range = 3 - 3 = 0
[1,3], range = 3 - 1 = 2
[3,3], range = 3 - 3 = 0
[1,3,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
Example 3:

Input: nums = [4,-2,-3,4,1]
Output: 59
Explanation: The sum of all subarray ranges of nums is 59.
 

Constraints:

1 <= nums.length <= 1000
-109 <= nums[i] <= 109

*/

function subArrayRanges(nums: number[]): number {
    console.time('subArrayRanges')
    const main: number[] = []
    let counter = 0

    while (counter < nums.length) {
        for (let ind in nums) {
            const currentIndex = Number(ind)
            if (currentIndex - counter >= 0) {
                const subArr = nums.slice(currentIndex - counter, currentIndex + 1)
                const assending = subArr.sort((a, b) => a - b)
                main.push(assending[assending.length - 1] - assending[0])
            }
        }
        counter++
    }


    const result = main.reduce((acc, item) => acc += item)
    console.timeEnd('subArrayRanges')
    return result
};


console.log(subArrayRanges([1, 3, 3])) //4
console.log(subArrayRanges([1, 2, 3])) //4
console.log(subArrayRanges([4, -2, -3, 4, 1])) //59
console.log(subArrayRanges([-1757,77433,-13341,-8692,52484,-38174,-75312,73568,93241,89209,97427,-80986,-55949,-73165,3209,4629,-61585,13113,15187,39658,-85507,-48534,-55877,-97314,-9800,71597,-86729,-33620,-11696,90604,83485,74762,55816,81158,-83745,71836,-94833,66631,92604,-46827,-35374,29623,-55009,-51876,94225,-79597,58109,-5097,42854,16711,-17785,93300,53749,-1991,-64943,52241,74501,-87330,92626,63528,-88794,52142,-62020,-22616,-92361,77753,27684,-69553,-47205,34117,69382,1801,89198,-78639,70936,79119,75599,70032,71060,-19228,-25929,21953,-13398,33521,-81435,41740,-45755,-88113,95618,-41000,20800,-99329,-79210,95162,81351,73265,-59650,22476,35718,-68520,-69365,-93921,-17642,27259,3673,-12654,-51896,83441,-94025,-84489,-89684,-69878,43686,90731,40710,40847,-79704,-36214,8422,63621,28776,-22751,-72758,-78573,14117,58051,-84777,88819,80792,32694,-92782,18802,81877,-44565,-67394,71692,-23322,15976,-33283,80639,-99342,-64749,-12229,67767,83351,-43872,76602,-386,-27558,-25704,14497,6524,67150,-30427,-75019,-77564,-74313,13940,-6411,56844,-50910,-30341,10652,20473,81500,-74260,87640,17344,-61684,-10766,50732,18187,13165,34341,60407,-49980,23898,-30516,-28567,-60934,17192,16011,-89720,-79943,91220,-84050,-38332,40509,25037,54064,-33209,-2904,-851,51714,-95523,97820,-84860,10987,35701,21520,17684,99549,57950,89537,-45611,34139,32944,21187,-81930,56851,16939,12944,24294,-53322,-50644,-19043,49384,23437,74792,-54782,-59761,26302,-97980,56354,-10028,-4384,74204,12007,-34191,-63005,37561,-90452,15261,-72405,70590,-78327,36803,49555,19276,-54055,-76428,62834,51196,-83182,43582,-83856,85583,-86812,-95127,-295,18122,-25709,2383,70290,-8502,42054,25125,-86042,58934,-6883,29842,-11417,-93469,96366,-70587,91813,-97815,-98702,55341,-81215,-1674,73513,12352,9705,-19918,59986,-56616,-67451,-92648,28947,-70290,-25719,49378,93317,-80107,66380,-19307,-83874,49343,28483,19349,-47372,82399,-19234,-98943,-38495,-55336,82526,25167,-9615,3101,-71048,-22494,7437,52401,-66446,-23595,86102,-2097,49521,-83433,82149,-19469,61344,-79055,95694,27685,-8477,65394,-27963,83256,13604,82814,-45126,59799,-63017,52419,56800,-89301,-33747,-5796,62128,23826,-38268,-80812,90829,-82106,15347,3210,-29040,-32276,-71419,2618,56004,-33763,36377,93574,-9677,91919,30669,-89141,91879,27611,-56850,72721,-71376,-82592,14388,13893,68832,-87647,-69706,57262,-71189,-88298,2710,-59967,34958,-48190,-49700,-13358,54262,-93933,-21731,39842,-54219,1353,79850,6482,-55667,32260,85934,44232,7098,40872,-13569,56816,14075,-45042,-83253,14848,59486,-86531,29603,-13523,63702,56937,87763,-99186,-51293,-25135,95975,-36260,68391,-58556,-30893,80531,58381,77032,33044,-50415,-76381,-56048,-74205,78139,38971,-66223,40124,48819,-59235,-57156,-87299,41749,75297,-96771,-69770,-96515,-84240,-89173,-84506,13178,19635,-68146,41333,-3001,-61671,-66549,-80669,94608,-77036,-70244,-39199,-79196,-37612,66186,-94233,95857,-4660,-4275,28705,-16671,73732,-42148,76387,-85205,-68149,-5412,-3438,97095,3187,-14528,40794,-36156,62919,-32770,81724,-54627,46127,8123,-6513,48652,-8338,-24760,-15160,72426,-3253,-99750,-63704,-87972,-36183,34752,27667,-62027,189,-79620,27595,-79994,-58990,80878,-64113,-98922,86494,-9096,37945,-72621,26801,94246,89379,-3133,-60650,22781,72048,95520,-6620,-81727,-15333,-37135,-43064,78976,56901,10825,-4449,-44997,10068,68991,30554,-86768,-24308,14462,23274,31273,-66684,37217,-57475,-85501,-3237,78327,17764,-35545,-56148,-49533,-85369,-69498,78173,13597,34372,-41546,67606,26227,95231,4344,57396,-77378,-14937,-7877,-13913,-87848,-63759,-9920,57230,-70868,47194,-41735,41287,-80632,-47269,-94003,74017,-25165,68484,-49821,50077,29240,4009,84705,-83929,84554,2070])) //Limiting Input


//NOt solved due to large Space Complexity in nums
//Time Limit Exceeded

//Just testing the speed